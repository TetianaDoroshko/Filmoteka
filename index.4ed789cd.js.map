{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const refs = {\n  searchForm: document.querySelector('.search-form'),\n  galleryContainer: document.querySelector('.gallery__container'),\n  backdrop: document.querySelector('.backdrop'),\n  searchInfo: document.querySelector('.header__info'),\n};\n\nAPI_KEY = 'ed056b717633eb18d85d4433e906e4ce';\nAPI_URL = 'https://api.themoviedb.org/3';\n\nwindow.addEventListener('DOMContentLoaded', showMovieCollection);\n\nasync function showMovieCollection() {\n  try {\n    await renderMovieCollection(await getMovieCollection());\n    refs.galleryContainer.addEventListener('click', showMovieInfo, {\n      capture: true,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n// ---- get collection\nasync function getMovieCollection() {\n  try {\n    const url = new URL(API_URL + '/trending/movie/day');\n    url.searchParams.set('api_key', API_KEY);\n\n    const response = await fetch(url);\n    if (!response.ok) {\n      const respJson = await response.json();\n      throw new Error(respJson.status_message);\n    }\n    const data = await response.json();\n    const collection = data.results;\n    // console.log(collection);\n    return collection;\n  } catch (error) {\n    console.log('fail in fetch', error);\n    return;\n  }\n}\n\nasync function getGenres() {\n  const url = new URL(API_URL + '/genre/movie/list');\n  url.searchParams.set('api_key', API_KEY);\n  url.searchParams.set('language', 'en-US');\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      const respJson = await response.json();\n      throw new Error(respJson.status_message);\n    }\n    const data = await response.json();\n    const genresList = data.genres;\n    return genresList;\n  } catch (error) {\n    console.log('fail in genres', error);\n  }\n}\n\nasync function renderMovieCollection(movieCollection) {\n  try {\n    const genresList = await getGenres();\n    if (!genresList) {\n      throw new Error(\"Can't get genres list\");\n    }\n    // console.log(genresList);\n    const markup = movieCollection\n      .map(movie => {\n        const genresInt = movie.genre_ids;\n        let genres = genresInt.map(gen => {\n          const genre = genresList.find(element => element.id === gen);\n          return genre.name;\n        });\n        genres = genres.join(', ');\n        return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n          movie.poster_path\n        } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n          movie.release_date\n        )}</p>\n        </div>\n        </article>`;\n      })\n      .join('');\n    refs.galleryContainer.innerHTML = markup;\n  } catch (error) {\n    console.log('fail in rendering', error);\n  }\n}\n//------ ----------------------\n//-----get found movies--------\n\nrefs.searchForm.addEventListener('submit', showFoundMovies);\n\nasync function showFoundMovies(event) {\n  event.preventDefault();\n\n  const searchQuery = event.target.elements.searchQuery.value;\n  if (searchQuery) {\n    renderFoundMovies(await getFoundMovies(searchQuery));\n  } else {\n    refs.searchInfo.textContent =\n      'Search query cannot be empty. Enter the correct movie name and try again.';\n  }\n\n  refs.searchForm.reset();\n}\n\nasync function getFoundMovies(q) {\n  try {\n    console.log(q);\n    const url = new URL(API_URL + '/search/movie');\n    url.searchParams.set('api_key', API_KEY);\n    url.searchParams.set('query', q);\n\n    const response = await fetch(url);\n    const data = await response.json();\n    const collection = data.results;\n    if (collection.length) {\n      return collection;\n    } else {\n      refs.searchInfo.textContent =\n        'Search result not successful. Enter the correct movie name and try again.';\n      refs.galleryContainer.innerHTML = '';\n    }\n  } catch (error) {\n    console.log('fail in fetch', error);\n    return;\n  }\n}\n\nasync function renderFoundMovies(movieSet) {\n  // console.log('movieSet', movieSet);\n  const genresList = await getGenres();\n\n  if (movieSet) {\n    const markup = movieSet\n      .map(movie => {\n        const genresInt = movie.genre_ids;\n        let genres = genresInt.map(gen => {\n          const genre = genresList.find(element => element.id === gen);\n          return genre.name;\n        });\n        genres = genres.join(', ');\n        return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n          movie.poster_path\n        } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n          movie.release_date\n        )}</p>\n        </div>\n        </article>`;\n      })\n      .join('');\n    refs.galleryContainer.innerHTML = markup;\n  }\n}\n//-------------------\n//------- show more info\n\nasync function showMovieInfo(event) {\n  const card = event.target.closest('.movie-card');\n  if (card) {\n    const id = card.getAttribute('id');\n    await renderMovieInfoCard(await getMovieById(id));\n    addListeners();\n  }\n}\n\nasync function getMovieById(id) {\n  const url = new URL(API_URL + '/movie/' + id);\n  url.searchParams.set('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const movieInfo = await response.json();\n  // console.log('movieInfo', movieInfo);\n  return movieInfo;\n}\n\nfunction renderMovieInfoCard(movieInfo) {\n  // console.log('movieInfo2', movieInfo);\n\n  refs.backdrop.classList.remove('hidden');\n  document.body.classList.add('is-hidden');\n\n  const genres = movieInfo.genres.map(gen => gen.name).join(', ');\n\n  const markup = `\n  <div class=\"modal\">\n    <button type=\"button\" class=\"btn-close\"></button>\n    <img class=\"modal__img\" srcset=\"https://image.tmdb.org/t/p/w300${movieInfo.poster_path} 300w, https://image.tmdb.org/t/p/w500${movieInfo.poster_path} 500w\" src=\"https://image.tmdb.org/t/p/w200${movieInfo.poster_path}\" sizes=\"100%\" alt=\"${movieInfo.title}\">\n    <div class=\"modal__content\">\n      <h2 class=\"modal__title\">${movieInfo.title}</h2>\n      <div class=\"modal__rate\">\n      <p class=\"modal__descr\">Vote / Votes</p>\n      <p>\n        <span class=\"accent\">${movieInfo.vote_average}</span> /\n        ${movieInfo.vote_count}\n      </p>\n      <p class=\"modal__descr\">Popularity</p>\n      <p>${movieInfo.popularity}</p>\n      <p class=\"modal__descr\">Original Title</p>\n      <p class=\"modal__orig-title\">${movieInfo.original_title}</p>\n      <p class=\"modal__descr\">Genre</p>\n      <p>${genres}</p>\n    </div>\n    <h3 class=\"modal__about\">About</h3>\n    <p>${movieInfo.overview}</p>\n    <div class=\"modal__buttons\">\n    <button type=\"button\" class=\"button modal__btn js-add-to-watched\">Add to watced</button>\n    <button type=\"button\" class=\"button modal__btn js-add-to-queue\">Add to queue</button>\n    </div>\n    </div>\n  </div>`;\n  // console.log(markup);\n  refs.backdrop.innerHTML = markup;\n}\n//-------------------------------\n\nfunction addListeners() {\n  const modalClose = document.querySelector('.btn-close');\n  modalClose.addEventListener('click', closeModal);\n\n  window.addEventListener('keydown', closeModalByEsc);\n\n  window.addEventListener('click', closeModalOutside);\n\n  const addToWatchedBtn = document.querySelector('.js-add-to-watched');\n  // addToWatchedBtn.addEventListener('click', addToWatchedMovies);\n}\nfunction closeModal() {\n  refs.backdrop.classList.add('hidden');\n  document.body.classList.remove('is-hidden');\n  // modalClose.removeEventListener('click', closeModal);\n  window.removeEventListener('keydown', closeModalByEsc);\n  window.removeEventListener('click', closeModalOutside);\n}\nfunction closeModalByEsc(e) {\n  if (e.code === 'Escape') {\n    closeModal();\n  }\n}\n\nfunction closeModalOutside(e) {\n  if (!e.target.closest('.modal')) {\n    closeModal();\n  }\n}\n// function addToWatchedMovies()\n\n// async function get() {\n//   const response = await fetch(\n//     'https://api.themoviedb.org/3/search/multi?api_key=ed056b717633eb18d85d4433e906e4ce&language=en-US&query=453395,982987'\n//   );\n//   const data = await response.json();\n//   console.log(data);\n//   return data;\n// }\n// console.log(get());\n// 453395,982987\n"],"names":["$1f0dc3b9307be026$var$refs","searchForm","document","querySelector","galleryContainer","backdrop","searchInfo","async","$1f0dc3b9307be026$var$getGenres","url","URL","API_URL","searchParams","set","API_KEY","response","fetch","ok","respJson","json","Error","status_message","data","genres","error","console","log","$1f0dc3b9307be026$var$showMovieInfo","event","card","target","closest","id","getAttribute","movieInfo","classList","remove","body","add","map","gen","name","join","markup","poster_path","title","vote_average","vote_count","popularity","original_title","overview","innerHTML","$1f0dc3b9307be026$var$renderMovieInfoCard","$1f0dc3b9307be026$var$getMovieById","addEventListener","$1f0dc3b9307be026$var$closeModal","window","$1f0dc3b9307be026$var$closeModalByEsc","$1f0dc3b9307be026$var$closeModalOutside","$1f0dc3b9307be026$var$addListeners","removeEventListener","e","code","movieCollection","genresList","movie","genre_ids","find","element","Number","parseInt","release_date","$1f0dc3b9307be026$var$renderMovieCollection","results","$1f0dc3b9307be026$var$getMovieCollection","capture","preventDefault","searchQuery","elements","value","movieSet","$1f0dc3b9307be026$var$renderFoundMovies","q","collection","length","textContent","$1f0dc3b9307be026$var$getFoundMovies","reset"],"version":3,"file":"index.4ed789cd.js.map"}