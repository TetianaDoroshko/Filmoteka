const t={searchForm:document.querySelector(".search-form"),galleryContainer:document.querySelector(".gallery__container"),backdrop:document.querySelector(".backdrop"),searchInfo:document.querySelector(".header__info")};async function e(){const t=new URL(API_URL+"/genre/movie/list");t.searchParams.set("api_key",API_KEY),t.searchParams.set("language","en-US");try{const e=await fetch(t);if(!e.ok){const t=await e.json();throw new Error(t.status_message)}const n=await e.json();return n.genres}catch(t){console.log("fail in genres",t)}}async function n(e){const n=e.target.closest(".movie-card");if(n){const e=n.getAttribute("id");await function(e){t.backdrop.classList.remove("hidden"),document.body.classList.add("is-hidden");const n=e.genres.map((t=>t.name)).join(", "),a=`\n  <div class="modal">\n    <button type="button" class="btn-close"></button>\n    <img class="modal__img" srcset="https://image.tmdb.org/t/p/w300${e.poster_path} 300w, https://image.tmdb.org/t/p/w500${e.poster_path} 500w" src="https://image.tmdb.org/t/p/w200${e.poster_path}" sizes="100%" alt="${e.title}">\n    <div class="modal__content">\n      <h2 class="modal__title">${e.title}</h2>\n      <div class="modal__rate">\n      <p class="modal__descr">Vote / Votes</p>\n      <p>\n        <span class="accent">${e.vote_average}</span> /\n        ${e.vote_count}\n      </p>\n      <p class="modal__descr">Popularity</p>\n      <p>${e.popularity}</p>\n      <p class="modal__descr">Original Title</p>\n      <p class="modal__orig-title">${e.original_title}</p>\n      <p class="modal__descr">Genre</p>\n      <p>${n}</p>\n    </div>\n    <h3 class="modal__about">About</h3>\n    <p>${e.overview}</p>\n    <div class="modal__buttons">\n    <button type="button" class="button modal__btn js-add-to-watched">Add to watced</button>\n    <button type="button" class="button modal__btn js-add-to-queue">Add to queue</button>\n    </div>\n    </div>\n  </div>`;t.backdrop.innerHTML=a}(await async function(t){const e=new URL(API_URL+"/movie/"+t);e.searchParams.set("api_key",API_KEY);const n=await fetch(e);return await n.json()}(e)),function(){document.querySelector(".btn-close").addEventListener("click",a),window.addEventListener("keydown",s),window.addEventListener("click",o);document.querySelector(".js-add-to-watched")}()}}function a(){t.backdrop.classList.add("hidden"),document.body.classList.remove("is-hidden"),window.removeEventListener("keydown",s),window.removeEventListener("click",o)}function s(t){"Escape"===t.code&&a()}function o(t){t.target.closest(".modal")||a()}API_KEY="ed056b717633eb18d85d4433e906e4ce",API_URL="https://api.themoviedb.org/3",window.addEventListener("DOMContentLoaded",(async function(){try{await async function(n){try{const a=await e();if(!a)throw new Error("Can't get genres list");const s=n.map((t=>{let e=t.genre_ids.map((t=>a.find((e=>e.id===t)).name));return e=e.join(", "),`\n        <article class="movie-card" id="${t.id}">\n        <div class="thumb">\n        <img class="movie-card__img" srcset="https://image.tmdb.org/t/p/w300${t.poster_path} 300w, https://image.tmdb.org/t/p/w500${t.poster_path} 500w" sizes="100%" alt="${t.title}"/>\n        </div>\n        <div class="movie-card__description">\n            <p class="movie-card__name">${t.title}</p>\n            <p class="movie-card__info">${e} | ${Number.parseInt(t.release_date)}</p>\n        </div>\n        </article>`})).join("");t.galleryContainer.innerHTML=s}catch(t){console.log("fail in rendering",t)}}(await async function(){try{const t=new URL(API_URL+"/trending/movie/day");t.searchParams.set("api_key",API_KEY);const e=await fetch(t);if(!e.ok){const t=await e.json();throw new Error(t.status_message)}const n=await e.json();return n.results}catch(t){return void console.log("fail in fetch",t)}}()),t.galleryContainer.addEventListener("click",n,{capture:!0})}catch(t){console.log(t)}})),t.searchForm.addEventListener("submit",(async function(n){n.preventDefault();const a=n.target.elements.searchQuery.value;a?async function(n){const a=await e();if(n){const e=n.map((t=>{let e=t.genre_ids.map((t=>a.find((e=>e.id===t)).name));return e=e.join(", "),`\n        <article class="movie-card" id="${t.id}">\n        <div class="thumb">\n        <img class="movie-card__img" srcset="https://image.tmdb.org/t/p/w300${t.poster_path} 300w, https://image.tmdb.org/t/p/w500${t.poster_path} 500w" sizes="100%" alt="${t.title}"/>\n        </div>\n        <div class="movie-card__description">\n            <p class="movie-card__name">${t.title}</p>\n            <p class="movie-card__info">${e} | ${Number.parseInt(t.release_date)}</p>\n        </div>\n        </article>`})).join("");t.galleryContainer.innerHTML=e}}(await async function(e){try{console.log(e);const n=new URL(API_URL+"/search/movie");n.searchParams.set("api_key",API_KEY),n.searchParams.set("query",e);const a=await fetch(n),s=(await a.json()).results;if(s.length)return s;t.searchInfo.textContent="Search result not successful. Enter the correct movie name and try again.",t.galleryContainer.innerHTML=""}catch(t){return void console.log("fail in fetch",t)}}(a)):t.searchInfo.textContent="Search query cannot be empty. Enter the correct movie name and try again.";t.searchForm.reset()}));
//# sourceMappingURL=index.4ed789cd.js.map
