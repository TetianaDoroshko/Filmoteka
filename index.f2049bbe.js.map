{"mappings":"AAAA,MAAMA,EAAO,CACXC,WAAYC,SAASC,cAAc,gBACnCC,iBAAkBF,SAASC,cAAc,uBACzCE,SAAUH,SAASC,cAAc,cAyBnCG,eAAeC,IACb,MAAMC,EAAM,IAAIC,IAAIC,QAAU,qBAC9BF,EAAIG,aAAaC,IAAI,UAAWC,SAChCL,EAAIG,aAAaC,IAAI,WAAY,SAEjC,MAAME,QAAiBC,MAAMP,GAG7B,aAFmBM,EAASE,QACJC,OAiD1BX,eAAeY,EAAeC,GAC5BC,QAAQC,IAAIF,GACZ,MAAMX,EAAM,IAAIC,IAAIC,QAAU,iBAC9BF,EAAIG,aAAaC,IAAI,UAAWC,SAChCL,EAAIG,aAAaC,IAAI,QAASO,GAE9B,MAAML,QAAiBC,MAAMP,GAEvBc,SADaR,EAASE,QACJO,QAExB,OADAH,QAAQC,IAAIC,GACLA,EAsCT,SAASE,EAAcC,GACrB,MAAMC,EAAOD,EAAME,OAAOC,QAAQ,eAClC,GAAIF,EAAM,EAMZpB,eAA4BuB,GAC1BT,QAAQC,IAAIQ,GACZ,MAAMrB,EAAM,IAAIC,IAAIC,QAAU,UAAYmB,GAC1CrB,EAAIG,aAAaC,IAAI,UAAWC,SAEhC,MAAMC,QAAiBC,MAAMP,GACvBsB,QAAkBhB,EAASE,OACjCI,QAAQC,IAAIS,IAXUC,CADTL,EAAKM,aAAa,OAiB/BhC,EAAKK,SAAS4B,UAAUC,OAAO,WAlJjCrB,QAAU,mCACVH,QAAU,+BAEVyB,OAAOC,iBAAiB,oBAExB9B,uBA4BAA,eAAqC+B,GACnC,MAAMC,QAAmB/B,IAEnBgC,EAASF,EACZG,KAAIC,IAEH,IAAIxB,EADcwB,EAAMC,UACDF,KAAIG,GACXL,EAAWM,MAAKC,GAAWA,EAAQhB,KAAOc,IAC3CG,OAGf,OADA7B,EAASA,EAAO8B,KAAK,MACd,6CAC6BN,EAAMZ,kHAGtCY,EAAMO,oDAERP,EAAMO,uCACoBP,EAAMQ,oHAGER,EAAMQ,sDACNhC,OAAYiC,OAAOC,SACrDV,EAAMW,2DAKTL,KAAK,IACR/C,EAAKI,iBAAiBiD,UAAYd,EAxD5Be,OAMRhD,iBACE,MAAME,EAAM,IAAIC,IAAIC,QAAU,uBAC9BF,EAAIG,aAAaC,IAAI,UAAWC,SAEhC,MAAMC,QAAiBC,MAAMP,GACvB+C,QAAazC,EAASE,OAE5B,OADmBuC,EAAKhC,QAZUiC,IAClCxD,EAAKI,iBAAiBgC,iBAAiB,QAASZ,EAAe,CAC7DiC,SAAS,OA2DbzD,EAAKC,WAAWmC,iBAAiB,UAEjC9B,eAA+BmB,GAC7BA,EAAMiC,iBAEN,MAAMC,EAAclC,EAAME,OAAOiC,SAASD,YAAYE,YAmBxDvD,eAAiCwD,GAC/B1C,QAAQC,IAAIyC,GACZ,MAAMxB,QAAmB/B,IAEnBgC,EAASuB,EACZtB,KAAIC,IAEH,IAAIxB,EADcwB,EAAMC,UACDF,KAAIG,GACXL,EAAWM,MAAKC,GAAWA,EAAQhB,KAAOc,IAC3CG,OAGf,OADA7B,EAASA,EAAO8B,KAAK,MACd,6CAC6BN,EAAMZ,kHAGtCY,EAAMO,oDAERP,EAAMO,uCACoBP,EAAMQ,oHAGER,EAAMQ,sDACNhC,OAAYiC,OAAOC,SACrDV,EAAMW,2DAKTL,KAAK,IACR/C,EAAKI,iBAAiBiD,UAAYd,EAhD5BwB,OAAwB7C,EAAeyC,IAE7C3D,EAAKC,WAAW+D,MAAM9C","sources":["src/index.js"],"sourcesContent":["const refs = {\n  searchForm: document.querySelector('.search-form'),\n  galleryContainer: document.querySelector('.gallery__container'),\n  backdrop: document.querySelector('.backdrop'),\n};\n\nAPI_KEY = 'ed056b717633eb18d85d4433e906e4ce';\nAPI_URL = 'https://api.themoviedb.org/3';\n\nwindow.addEventListener('DOMContentLoaded', showMovieCollection);\n\nasync function showMovieCollection() {\n  await renderMovieCollection(await getMovieCollection());\n  refs.galleryContainer.addEventListener('click', showMovieInfo, {\n    capture: true,\n  });\n}\n// ---- get collection\nasync function getMovieCollection() {\n  const url = new URL(API_URL + '/trending/movie/day');\n  url.searchParams.set('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const collection = data.results;\n  return collection;\n}\n\nasync function getGenres() {\n  const url = new URL(API_URL + '/genre/movie/list');\n  url.searchParams.set('api_key', API_KEY);\n  url.searchParams.set('language', 'en-US');\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const genresList = data.genres;\n  return genresList;\n}\n\nasync function renderMovieCollection(movieCollection) {\n  const genresList = await getGenres();\n\n  const markup = movieCollection\n    .map(movie => {\n      const genresInt = movie.genre_ids;\n      let genres = genresInt.map(gen => {\n        const genre = genresList.find(element => element.id === gen);\n        return genre.name;\n      });\n      genres = genres.join(', ');\n      return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n        movie.release_date\n      )}</p>\n        </div>\n        </article>`;\n    })\n    .join('');\n  refs.galleryContainer.innerHTML = markup;\n}\n//------ ----------------------\n//-----get found movies--------\n\nrefs.searchForm.addEventListener('submit', showFoundMovies);\n\nasync function showFoundMovies(event) {\n  event.preventDefault();\n\n  const searchQuery = event.target.elements.searchQuery.value;\n  await renderFoundMovies(await getFoundMovies(searchQuery));\n\n  refs.searchForm.reset(getFoundMovies());\n}\n\nasync function getFoundMovies(q) {\n  console.log(q);\n  const url = new URL(API_URL + '/search/movie');\n  url.searchParams.set('api_key', API_KEY);\n  url.searchParams.set('query', q);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const collection = data.results;\n  console.log(collection);\n  return collection;\n}\n\nasync function renderFoundMovies(movieSet) {\n  console.log(movieSet);\n  const genresList = await getGenres();\n\n  const markup = movieSet\n    .map(movie => {\n      const genresInt = movie.genre_ids;\n      let genres = genresInt.map(gen => {\n        const genre = genresList.find(element => element.id === gen);\n        return genre.name;\n      });\n      genres = genres.join(', ');\n      return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n        movie.release_date\n      )}</p>\n        </div>\n        </article>`;\n    })\n    .join('');\n  refs.galleryContainer.innerHTML = markup;\n}\n//-------------------\n//------- show more info\n\nfunction showMovieInfo(event) {\n  const card = event.target.closest('.movie-card');\n  if (card) {\n    const id = card.getAttribute('id');\n    renderMovieInfoCard(getMovieById(id));\n  }\n}\n\nasync function getMovieById(id) {\n  console.log(id);\n  const url = new URL(API_URL + '/movie/' + id);\n  url.searchParams.set('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const movieInfo = await response.json();\n  console.log(movieInfo);\n  return movieInfo;\n}\n\nfunction renderMovieInfoCard(movieInfo) {\n  refs.backdrop.classList.remove('hidden');\n}\n// const mongoose = require('mongoose');\n// const mongoosePaginate = require('mongoose-paginate-v2');\n\n// const mySchema = new mongoose.Schema({\n//   /* your schema definition */\n// });\n\n// mySchema.plugin(mongoosePaginate);\n\n// const myModel = mongoose.model('SampleModel', mySchema);\n\n// myModel.paginate().then({}); // Usage\n"],"names":["$1f0dc3b9307be026$var$refs","searchForm","document","querySelector","galleryContainer","backdrop","async","$1f0dc3b9307be026$var$getGenres","url","URL","API_URL","searchParams","set","API_KEY","response","fetch","json","genres","$1f0dc3b9307be026$var$getFoundMovies","q","console","log","collection","results","$1f0dc3b9307be026$var$showMovieInfo","event","card","target","closest","id","movieInfo","$1f0dc3b9307be026$var$getMovieById","getAttribute","classList","remove","window","addEventListener","movieCollection","genresList","markup","map","movie","genre_ids","gen","find","element","name","join","poster_path","title","Number","parseInt","release_date","innerHTML","$1f0dc3b9307be026$var$renderMovieCollection","data","$1f0dc3b9307be026$var$getMovieCollection","capture","preventDefault","searchQuery","elements","value","movieSet","$1f0dc3b9307be026$var$renderFoundMovies","reset"],"version":3,"file":"index.f2049bbe.js.map"}