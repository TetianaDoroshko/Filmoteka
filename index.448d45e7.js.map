{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const refs = {\n  searchForm: document.querySelector('.search-form'),\n  galleryContainer: document.querySelector('.gallery__container'),\n  backdrop: document.querySelector('.backdrop'),\n};\n\nAPI_KEY = 'ed056b717633eb18d85d4433e906e4ce';\nAPI_URL = 'https://api.themoviedb.org/3';\n\nwindow.addEventListener('DOMContentLoaded', showMovieCollection);\n\nasync function showMovieCollection() {\n  await renderMovieCollection(await getMovieCollection());\n  refs.galleryContainer.addEventListener('click', showMovieInfo, {\n    capture: true,\n  });\n}\n// ---- get collection\nasync function getMovieCollection() {\n  const url = new URL(API_URL + '/trending/movie/day');\n  url.searchParams.set('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const collection = data.results;\n  return collection;\n}\n\nasync function getGenres() {\n  const url = new URL(API_URL + '/genre/movie/list');\n  url.searchParams.set('api_key', API_KEY);\n  url.searchParams.set('language', 'en-US');\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const genresList = data.genres;\n  return genresList;\n}\n\nasync function renderMovieCollection(movieCollection) {\n  const genresList = await getGenres();\n  console.log(genresList);\n  const markup = movieCollection\n    .map(movie => {\n      const genresInt = movie.genre_ids;\n      let genres = genresInt.map(gen => {\n        const genre = genresList.find(element => element.id === gen);\n        return genre.name;\n      });\n      genres = genres.join(', ');\n      return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n        movie.release_date\n      )}</p>\n        </div>\n        </article>`;\n    })\n    .join('');\n  refs.galleryContainer.innerHTML = markup;\n}\n//------ ----------------------\n//-----get found movies--------\n\nrefs.searchForm.addEventListener('submit', showFoundMovies);\n\nasync function showFoundMovies(event) {\n  event.preventDefault();\n\n  const searchQuery = event.target.elements.searchQuery.value;\n  await renderFoundMovies(await getFoundMovies(searchQuery));\n\n  refs.searchForm.reset(getFoundMovies());\n}\n\nasync function getFoundMovies(q) {\n  console.log(q);\n  const url = new URL(API_URL + '/search/movie');\n  url.searchParams.set('api_key', API_KEY);\n  url.searchParams.set('query', q);\n\n  const response = await fetch(url);\n  const data = await response.json();\n  const collection = data.results;\n  console.log(collection);\n  return collection;\n}\n\nasync function renderFoundMovies(movieSet) {\n  console.log('movieSet', movieSet);\n  const genresList = await getGenres();\n\n  const markup = movieSet\n    .map(movie => {\n      const genresInt = movie.genre_ids;\n      let genres = genresInt.map(gen => {\n        const genre = genresList.find(element => element.id === gen);\n        return genre.name;\n      });\n      genres = genres.join(', ');\n      return `\n        <article class=\"movie-card\" id=\"${movie.id}\">\n        <div class=\"thumb\">\n        <img class=\"movie-card__img\" srcset=\"https://image.tmdb.org/t/p/w300${\n          movie.poster_path\n        } 300w, https://image.tmdb.org/t/p/w500${\n        movie.poster_path\n      } 500w\" sizes=\"100%\" alt=\"${movie.title}\"/>\n        </div>\n        <div class=\"movie-card__description\">\n            <p class=\"movie-card__name\">${movie.title}</p>\n            <p class=\"movie-card__info\">${genres} | ${Number.parseInt(\n        movie.release_date\n      )}</p>\n        </div>\n        </article>`;\n    })\n    .join('');\n  refs.galleryContainer.innerHTML = markup;\n}\n//-------------------\n//------- show more info\n\nasync function showMovieInfo(event) {\n  const card = event.target.closest('.movie-card');\n  if (card) {\n    const id = card.getAttribute('id');\n    await renderMovieInfoCard(await getMovieById(id));\n  }\n}\n\nasync function getMovieById(id) {\n  console.log(id);\n  const url = new URL(API_URL + '/movie/' + id);\n  url.searchParams.set('api_key', API_KEY);\n\n  const response = await fetch(url);\n  const movieInfo = await response.json();\n  console.log('movieInfo', movieInfo);\n  return movieInfo;\n}\n\nfunction renderMovieInfoCard(movieInfo) {\n  console.log('movieInfo2', movieInfo);\n  refs.backdrop.classList.remove('hidden');\n  const genres = movieInfo.genres.map(gen => gen.name).join(', ');\n  console.log(genres);\n  const markup = `\n  <div class=\"modal\">\n    <button type=\"button\" class=\"btn-close\"></button>\n    <img class=\"modal__img\" srcset=\"https://image.tmdb.org/t/p/w300${movieInfo.poster_path} 300w, https://image.tmdb.org/t/p/w500${movieInfo.poster_path} 500w\" src=\"https://image.tmdb.org/t/p/w200${movieInfo.poster_path}\" sizes=\"100%\" alt=\"${movieInfo.title}\">\n    <h2>${movieInfo.title}</h2>\n<div class=\"modal__titre\">\n      <p>Vote / Votes</p>\n      <p>\n        <span class=\"accent\">${movieInfo.vote_average}</span> /\n        ${movieInfo.vote_count}\n      </p>\n      <p>Popularity</p>\n      <p>${movieInfo.popularity}</p>\n      <p>Original Title</p>\n      <p>${movieInfo.original_title}</p>\n      <p>Genre</p>\n      <p>${genres}</p>\n    </div>    <h3>About</h3>\n    <p>${movieInfo.overview}</p>\n    <button type=\"button modal__btn\">Add to watced</button>\n    <button type=\"button modal__btn\">Add to queue</button>\n  </div>`;\n  // console.log(markup);\n  refs.backdrop.innerHTML = markup;\n}\n"],"names":["$1f0dc3b9307be026$var$refs","searchForm","document","querySelector","galleryContainer","backdrop","async","$1f0dc3b9307be026$var$getGenres","url","URL","API_URL","searchParams","set","API_KEY","response","fetch","json","genres","$1f0dc3b9307be026$var$getFoundMovies","q","console","log","collection","results","$1f0dc3b9307be026$var$showMovieInfo","event","card","target","closest","id","getAttribute","movieInfo","classList","remove","map","gen","name","join","markup","poster_path","title","vote_average","vote_count","popularity","original_title","overview","innerHTML","$1f0dc3b9307be026$var$renderMovieInfoCard","$1f0dc3b9307be026$var$getMovieById","window","addEventListener","movieCollection","genresList","movie","genre_ids","find","element","Number","parseInt","release_date","$1f0dc3b9307be026$var$renderMovieCollection","data","$1f0dc3b9307be026$var$getMovieCollection","capture","preventDefault","searchQuery","elements","value","movieSet","$1f0dc3b9307be026$var$renderFoundMovies","reset"],"version":3,"file":"index.448d45e7.js.map"}